#!/bin/sh

#Install complete guests for all hypervisors
if [ -x /usr/bin/systemd-detect-virt ]; then

SYSTEMD_CHECK=$(systemd-detect-virt || true)
SYS_CHECK=$(cat /sys/class/dmi/id/sys_vendor | cut -d' ' -f1)

if [ $SYSTEMD_CHECK = vmware ]; then
	echo "Hypervisor detected: $SYSTEMD_CHECK. Install VMWare guest additions."
	apt-get install -y open-vm-tools open-vm-tools-desktop open-vm-tools-containerinfo open-vm-tools-salt-minion open-vm-tools-sdmp || true
	systemctl enable open-vm-tools vgauth

elif [ $SYS_CHECK = innotek ]; then
	echo "Hypervisor detected: $SYS_CHECK (VirtualBox). Install all VirtualBox guest additions."
	apt-get install -y virtualbox-guest-utils virtualbox-guest-x11 || true
	systemctl enable virtualbox-guest-utils

elif [ $SYS_CHECK = QEMU ]; then
	echo "Hypervisor detected: $SYS_CHECK. Install all QEMU guest additions."
	apt-get install -y xserver-xorg-video-qxl qemu-guest-agent spice-vdagent spice-webdavd || true
	systemctl enable spice-vdagentd.service spice-vdagentd.socket spice-webdavd.service qemu-guest-agent.service

elif [ $SYSTEMD_CHECK = microsoft ]; then
	echo "Hypervisor detected: $SYSTEMD_CHECK. Install Hyper-V guest additions."
	apt-get install -y hyperv-daemons || true
fi
fi

#Add the created user to the vboxusers group if it exists
if getent group vboxusers >/dev/null 2>&1 ; then
	echo "The vboxusers group exist. Adding the created user in this group..."
        for user in $(awk -F: '/\/home/ {printf "%s:%s\n",$1,$3}' /etc/passwd | cut -d: -f1)
        do
                usermod -a -G vboxusers "$user" || true
        done
	echo "Done"
fi

#Add the created user to the vboxsf group if it exists
if getent group vboxsf >/dev/null 2>&1 ; then
	echo "The vboxsf group exist. Adding the created user in this group..."
        for user in $(awk -F: '/\/home/ {printf "%s:%s\n",$1,$3}' /etc/passwd | cut -d: -f1)
        do
                usermod -a -G vboxsf "$user" || true
        done
	echo "Done"
fi

#Add the created user to the gns3 group if it exists
if getent group gns3 >/dev/null 2>&1 ; then
        echo "The gns3 group exist. Adding the created user in this group..."
        for user in $(awk -F: '/\/home/ {printf "%s:%s\n",$1,$3}' /etc/passwd | cut -d: -f1)
        do
                usermod -a -G gns3 "$user" || true
        done
        echo "Done"
fi

#Add the created user to the docker group if it exists
if getent group docker >/dev/null 2>&1 ; then
        echo "The docker group exist. Adding the created user in this group..."
        for user in $(awk -F: '/\/home/ {printf "%s:%s\n",$1,$3}' /etc/passwd | cut -d: -f1)
        do
                usermod -a -G docker "$user" || true
        done
        echo "Done"
fi

#Add the created user to the libvirt group if it exists
if getent group libvirt >/dev/null 2>&1 ; then
        echo "The libvirt group exist. Adding the created user in this group..."
        for user in $(awk -F: '/\/home/ {printf "%s:%s\n",$1,$3}' /etc/passwd | cut -d: -f1)
        do
                usermod -a -G libvirt "$user" || true
        done
        echo "Done"
fi

#Check if / use BTRFS as default filesystem to install kaisen-btrfs-snapshots
CHECK_ROOTFS=$(grep -v -E "^(#|$)" /etc/fstab | grep -v /bin | grep -v /boot | grep -v /etc | grep -v /home | grep -v /lib | grep -v /media | grep -v /mnt | grep -v /opt | grep -v /root | grep -v /run | grep -v /sbin | grep -v /srv | grep -v /tmp | grep -v /usr | grep -v /var | grep -o btrfs || true)
CHECK_FSTAB=$(grep -v -E "^(#|$)" /etc/fstab | grep -v /bin | grep -v /boot | grep -v /etc | grep -v /home | grep -v /lib | grep -v /media | grep -v /mnt | grep -v /opt | grep -v /root | grep -v /run | grep -v /sbin | grep -v /srv | grep -v /tmp | grep -v /usr | grep -v /var | grep -o subvol=@ || true)
CHECK_SUBVOL=$(btrfs subvolume list / 2> /dev/null | grep -o @ 2> /dev/null || true)

if [ $CHECK_ROOTFS = btrfs 2> /dev/null ] && [ $CHECK_FSTAB = "subvol=@" 2> /dev/null ] && [ $CHECK_SUBVOL = @ 2> /dev/null ]; then
	echo "BTRFS is the filesystem use for / partition, and the / partition is mount in the @ subvolume. Install snapshots tools."
	apt-get install -y kaisen-btrfs-snapshots || true
	#Force the deactivation of BTRFS quota
	btrfs quota disable /
	btrfs quota disable /home
else
	echo "BTRFS is not use for / partition or the / partition is not mount in the @ subvolume. Snapshots tools are not installed."
fi

#Disable services
echo "Disable additionals daemons installed by kaisen packages..."
if [ -x /usr/share/kaisen-services-management/all-services-disable ]; then
        /usr/share/kaisen-services-management/all-services-disable
else
	systemctl disable 2ping || true
	systemctl disable arpalert || true
	systemctl disable arpwatch || true
	systemctl disable avahi-daemon || true
	systemctl disable bacula-fd || true
	systemctl disable bacula-sd || true
	systemctl disable bettercap || true
	systemctl disable blueman-mechanism || true
	systemctl disable bluetooth || true
	systemctl disable btrbk.service || true
	systemctl disable btrbk.timer || true
	systemctl disable btrfs-balance.service || true
	systemctl disable btrfs-balance.timer || true
	systemctl disable btrfs-defrag.service || true
	systemctl disable btrfs-defrag.timer || true
	systemctl disable btrfsmaintenance-refresh.path || true
	systemctl disable btrfsmaintenance-refresh.service || true
	systemctl disable btrfs-scrub.service || true
	systemctl disable btrfs-scrub.timer || true
	systemctl disable btrfs-trim.service || true
	systemctl disable btrfs-trim.timer || true
	systemctl disable ceph-fuse.target || true
	systemctl disable chrony || true
	systemctl disable clamav-daemon || true
	systemctl disable clamav-freshclam || true
	systemctl disable clamav-milter || true
	systemctl disable containerd || true
	systemctl disable cups-browsed || true
	systemctl disable cups.path || true
	systemctl disable cups.socket || true
	systemctl disable cups || true
	systemctl disable darkstat || true
	systemctl disable docker.socket || true
	systemctl disable docker || true
	systemctl disable e2scrub_all.timer || true
	systemctl disable e2scrub_reap || true
	systemctl disable etc-setserial || true
	systemctl disable fio || true
	systemctl disable gns3-server || true
	systemctl disable hddtemp || true
	systemctl disable ip6tables || true
	systemctl disable iptables || true
	systemctl disable libvirtd-admin.socket || true
	systemctl disable libvirtd-ro.socket || true
	systemctl disable libvirtd.service || true
	systemctl disable libvirtd.socket || true
	systemctl disable libvirtd-tcp.socket || true
	systemctl disable libvirtd-tls.socket || true
	systemctl disable libvirt-guests.service || true
	systemctl disable lm-sensors || true
	systemctl disable lxcfs || true
	systemctl disable lxc-monitord.service || true
	systemctl disable lxc-net || true
	systemctl disable lxc || true
	systemctl disable lxd-agent.service || true
	systemctl disable lxd.socket || true
	systemctl disable lxd.service || true
	systemctl disable lxd-containers.service || true
	systemctl disable neo4j || true
	systemctl disable netfilter-persistent || true
	systemctl disable nfs-blkmap.service || true
	systemctl disable nfs-client.target || true
	systemctl disable nfs-common.service || true
	systemctl disable nfsdcld.service || true
	systemctl disable nfs-idmapd.service || true
	systemctl disable nfs-kernel-server || true
	systemctl disable nfs-mountd.service || true
	systemctl disable nfs-server.service || true
	systemctl disable nfs-utils.service || true
	systemctl disable nftables || true
	systemctl disable nmbd || true
	systemctl disable o2cb || true
	systemctl disable ocfs2 || true
	systemctl disable openvpn || true
	systemctl disable plocate-updatedb.service || true
	systemctl disable plocate-updatedb.timer || true
	systemctl disable podman-auto-update.service || true
	systemctl disable podman-auto-update.timer || true
	systemctl disable podman-restart.service || true
	systemctl disable podman.service || true
	systemctl disable podman.socket || true
	systemctl disable portmap || true
	systemctl disable puppet || true
	systemctl disable pxp-agent || true
	systemctl disable rpcbind.service || true
	systemctl disable rpcbind.socket || true
	systemctl disable rpcbind.target || true
	systemctl disable rpc-gssd.service || true
	systemctl disable rpc_pipefs.target || true
	systemctl disable rpc-statd-notify.service || true
	systemctl disable rpc-statd.service || true
	systemctl disable rpc-svcgssd.service || true
	systemctl disable rsync || true
	systemctl disable samba-ad-dc.service || true
	systemctl disable setserial || true
	systemctl disable smartmontools || true
	systemctl disable smbd || true
	systemctl disable snapper-boot.service || true
	systemctl disable snapper-boot.timer || true
	systemctl disable snapper-cleanup.service || true
	systemctl disable snapper-cleanup.timer || true
	systemctl disable snapperd || true
	systemctl disable snapper-timeline.service || true
	systemctl disable snapper-timeline.timer || true
	systemctl disable ssh || true
	systemctl disable sysstat-collect.service || true
	systemctl disable sysstat-collect.timer || true
	systemctl disable sysstat || true
	systemctl disable sysstat-summary.service || true
	systemctl disable sysstat-summary.timer || true
	systemctl disable vault || true
	systemctl disable virtlockd-admin.socket || true
	systemctl disable virtlockd.service || true
	systemctl disable virtlockd.socket || true
	systemctl disable virtlogd-admin.socket || true
	systemctl disable virtlogd.service || true
	systemctl disable virtlogd.socket || true
	systemctl disable zfs-fuse || true

	echo "All additionals services were disabled."
fi

#Remove LXQT packages when only kaisen-mate is installed
if [ `dpkg -l | grep kaisen-mate | awk '{ print $2 }'` = "kaisen-mate" 2> /dev/null ] && [ "`dpkg-query -W --showformat='${Status}\n' kaisen-lxqt`" = "unknown ok not-installed" 2> /dev/null ]; then
        dpkg -l | grep lxqt | awk '{ print $2 }' | xargs apt-get autoremove --purge -y
fi

#Remove LXQT packages when only kaisen-kde is installed
if [ `dpkg -l | grep kaisen-kde | awk '{ print $2 }'` = "kaisen-kde" 2> /dev/null ] && [ "`dpkg-query -W --showformat='${Status}\n' kaisen-lxqt`" = "unknown ok not-installed" 2> /dev/null ]; then
        dpkg -l | grep lxqt | awk '{ print $2 }' | xargs apt-get autoremove --purge -y
fi

#Remove LXQT packages when only kaisen-xfce is installed
if [ `dpkg -l | grep kaisen-xfce | awk '{ print $2 }'` = "kaisen-xfce" 2> /dev/null ] && [ "`dpkg-query -W --showformat='${Status}\n' kaisen-lxqt`" = "unknown ok not-installed" 2> /dev/null ]; then
        dpkg -l | grep lxqt | awk '{ print $2 }' | xargs apt-get autoremove --purge -y
fi

#Update the files database for the plocate command
if command -v updatedb &> /dev/null
then
        updatedb
fi

#Force the ejection of the CDROM after the installation
CDROM=$(mount | grep "on /cdrom" | cut -d ' ' -f 1)
eject -F $CDROM 2> /dev/null || true
